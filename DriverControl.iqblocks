{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">myVariable</variable><variable type=\"boolean\" id=\"|Gv1[dw~pSxQXwtuYZ`l\">ToggleUpDown</variable></variables><block type=\"iq_control_if_then\" id=\"Kb|{;bJ!?22VfQDvL7!b\" x=\"690\" y=\"-6830\"></block><block type=\"iq_events_when_controller_button\" id=\"=xz~Vk#_Il{xL%YaL4uF\" x=\"610\" y=\"210\"><field name=\"BUTTON\">ButtonEDown</field><field name=\"EVENTTYPE\">pressed</field></block><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"390\"><next><block type=\"iq_variables_set_boolean_variable\" id=\"$MjDe^l{=K!-~4j+=.0R\"><field name=\"VARIABLE\" id=\"|Gv1[dw~pSxQXwtuYZ`l\" variabletype=\"boolean\">ToggleUpDown</field><value name=\"VALUE\"><shadow type=\"bool_input\" id=\"a}yS3$-GY7]f2P[]U,{F\"><field name=\"VALUE\">false</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"MoV^Dh6C;L16;EgCNI;B\"><field name=\"MOTOR\">FlyWheel</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"r{V,tgW;uh]n;n_yUPEX\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"qVdH}{VLG%ux{fXBR{_r\"><field name=\"MOTOR\">LiftMech</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"lzX=r8JgKm@5r)uYOKg?\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"_,T|giD/CvFwikz;7I|[\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Bf+khg2]]g7n;alX]Dma\"><field name=\"NUM\">70</field></shadow></value></block></next></block></next></block></next></block></next></block><block type=\"iq_control_if_elseif_else\" id=\"PbgqhG)8^S{q?VQ?5aKl\" x=\"770\" y=\"370\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" branches=\"2\"></mutation><value name=\"CONDITION1\"><block type=\"iq_variables_boolean_variable\" id=\"cPsy0J{O6vSQ)qrEe8zC\"><field name=\"VARIABLE\" id=\"|Gv1[dw~pSxQXwtuYZ`l\" variabletype=\"boolean\">ToggleUpDown</field></block></value><statement name=\"SUBSTACK1\"><block type=\"iq_motion_spin_for\" id=\"1zQWVecXlPzv1P6M{GHY\"><field name=\"MOTOR\">LiftMech</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"/~8{Kp-p_+ZE*kA2*CCj\"><field name=\"NUM\">510</field></shadow></value><next><block type=\"iq_variables_set_boolean_variable\" id=\"a4d3cmfl2|0Af/c/43F$\"><field name=\"VARIABLE\" id=\"|Gv1[dw~pSxQXwtuYZ`l\" variabletype=\"boolean\">ToggleUpDown</field><value name=\"VALUE\"><shadow type=\"bool_input\" id=\"*y?lNb~xc?[^ozruKo~R\"><field name=\"VALUE\">false</field></shadow></value></block></next></block></statement><value name=\"CONDITION2\"><block type=\"iq_operator_not\" id=\"{2{sY|!7ZJs)YwqPL57i\"><value name=\"OPERAND\"><block type=\"iq_variables_boolean_variable\" id=\"seNSpR@@IdloN@qn!%_$\"><field name=\"VARIABLE\" id=\"|Gv1[dw~pSxQXwtuYZ`l\" variabletype=\"boolean\">ToggleUpDown</field></block></value></block></value><statement name=\"SUBSTACK2\"><block type=\"iq_motion_spin_for\" id=\"-zm~Nnnl=nfzbDkjY9RT\"><field name=\"MOTOR\">LiftMech</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"uLFN34v!t=%tNbNj%QM@\"><field name=\"NUM\">500</field></shadow></value><next><block type=\"iq_variables_set_boolean_variable\" id=\"uC9dpgH=W2}GmN`ut0%J\"><field name=\"VARIABLE\" id=\"|Gv1[dw~pSxQXwtuYZ`l\" variabletype=\"boolean\">ToggleUpDown</field><value name=\"VALUE\"><shadow type=\"bool_input\" id=\"q::kC$#u.ir-?D0g)s`B\"><field name=\"VALUE\">true</field></shadow></value></block></next></block></statement></block><block type=\"iq_events_when_controller_button\" id=\"[WfA_P!L|P1]P//Xa,kQ\" x=\"330\" y=\"750\"><field name=\"BUTTON\">ButtonRUp</field><field name=\"EVENTTYPE\">pressed</field></block><block type=\"iq_events_when_started\" id=\"9`+nn,e25+P^]QZ6AUiT\" x=\"970\" y=\"830\"><next><block type=\"iq_control_forever\" id=\"1VXN+3}qI*Q*{u/wZ@,Y\"><statement name=\"SUBSTACK\"><block type=\"iq_control_if_elseif_else\" id=\"quoH[/%gQ2fMps+{4Dq7\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" branches=\"2\"></mutation><value name=\"CONDITION1\"><block type=\"iq_sensing_pressing_controller\" id=\"QZmW/=lXD[.*I{@G=Li^\"><field name=\"BUTTON\">ButtonRUp</field></block></value><statement name=\"SUBSTACK1\"><block type=\"iq_motion_spin\" id=\"J|/!%|=W:)uN.TN1i]6:\"><field name=\"MOTOR\">FlyWheel</field><field name=\"DIRECTION\">fwd</field></block></statement><value name=\"CONDITION2\"><block type=\"iq_sensing_pressing_controller\" id=\"(7(xYEk^~Z)JxCcrvw|5\"><field name=\"BUTTON\">ButtonRDown</field></block></value><statement name=\"SUBSTACK2\"><block type=\"iq_motion_spin\" id=\"]eMm$7fpxhy5Z}ga0!On\"><field name=\"MOTOR\">FlyWheel</field><field name=\"DIRECTION\">rev</field></block></statement><statement name=\"SUBSTACK_ELSE\"><block type=\"iq_motion_stop_motor\" id=\"_-tWQGBZo3U4DvBEcQL6\"><field name=\"MOTOR\">FlyWheel</field></block></statement></block></statement></block></next></block><block type=\"iq_events_when_started\" id=\"ba`C*$@)hX+TWfYfJNiB\" x=\"250\" y=\"870\"><next><block type=\"iq_control_forever\" id=\"PX2kAW9tZjcr$hjgr6Eg\"><statement name=\"SUBSTACK\"><block type=\"iq_control_if_elseif_else\" id=\"V0!!rOnp};bYg%l5jAp3\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" branches=\"2\"></mutation><value name=\"CONDITION1\"><block type=\"iq_sensing_pressing_controller\" id=\"H6GnoYDLpd)3*D/C5[.V\"><field name=\"BUTTON\">ButtonEUp</field></block></value><statement name=\"SUBSTACK1\"><block type=\"iq_motion_spin\" id=\"d7k%e!_;P*fOM~7V$j/`\"><field name=\"MOTOR\">LiftMech</field><field name=\"DIRECTION\">fwd</field></block></statement><value name=\"CONDITION2\"><block type=\"iq_sensing_pressing_controller\" id=\"4ro^LG).@{H3M=!2{F!q\"><field name=\"BUTTON\">ButtonEDown</field></block></value><statement name=\"SUBSTACK2\"><block type=\"iq_motion_spin\" id=\"tL7]67:RBgTF=q`-qNew\"><field name=\"MOTOR\">LiftMech</field><field name=\"DIRECTION\">rev</field></block></statement><statement name=\"SUBSTACK_ELSE\"><block type=\"iq_motion_stop_motor\" id=\"Kk]]F)fh=(NQ96B58([~\"><field name=\"MOTOR\">LiftMech</field></block></statement></block></statement></block></next></block><block type=\"iq_control_if_then\" id=\"ZPD5#6__xHO(P9q:9Bx$\" x=\"490\" y=\"950\"></block><block type=\"iq_operator_not\" id=\"Hy[Ic?Xo%7-qo[oKTT17\" x=\"710\" y=\"950\"></block><block type=\"iq_control_repeat_until\" id=\"em4D+6JAqVhu,`XiiGYu\" x=\"810\" y=\"1110\"></block><block type=\"iq_control_repeat_until\" id=\"];Jvr/i=;!J`ep:!fSaN\" x=\"630\" y=\"1250\"><value name=\"CONDITION\"><block type=\"iq_operator_not\" id=\"wDr7^gEZ~kc0vt%0bfK:\"></block></value></block><block type=\"iq_events_when_controller_button\" id=\",]-6s`zxw4E@l-SXN`?+\" x=\"310\" y=\"1490\"><field name=\"BUTTON\">ButtonRDown</field><field name=\"EVENTTYPE\">pressed</field></block></xml>","rconfig":[{"port":[4],"name":"LiftMech","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[11],"name":"FlyWheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1,6,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[5],"name":"Bumper5","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LiftMech = motor(PORT4, false);\nmotor FlyWheel = motor(PORT11, false);\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nbumper Bumper5 = bumper(PORT5);\ncontroller Controller = controller();\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisC\n      // right = AxisA - AxisC\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\nbool ToggleUpDown;\n\n// \"when Controller ButtonEDown pressed\" hat block\nvoid onevent_ControllerButtonEDown_pressed_0() {\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  ToggleUpDown = false;\n  FlyWheel.setVelocity(100.0, percent);\n  LiftMech.setVelocity(75.0, percent);\n  Drivetrain.setDriveVelocity(70.0, percent);\n  return 0;\n}\n\n// \"when Controller ButtonRUp pressed\" hat block\nvoid onevent_ControllerButtonRUp_pressed_0() {\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  while (true) {\n    if (Controller.ButtonRUp.pressing()) {\n      FlyWheel.spin(forward);\n    } else if (Controller.ButtonRDown.pressing()) {\n      FlyWheel.spin(reverse);\n    } else {\n      FlyWheel.stop();\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted3() {\n  while (true) {\n    if (Controller.ButtonEUp.pressing()) {\n      LiftMech.spin(forward);\n    } else if (Controller.ButtonEDown.pressing()) {\n      LiftMech.spin(reverse);\n    } else {\n      LiftMech.stop();\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller ButtonRDown pressed\" hat block\nvoid onevent_ControllerButtonRDown_pressed_0() {\n}\n\n\nint main() {\n  // register event handlers\n  Controller.ButtonEDown.pressed(onevent_ControllerButtonEDown_pressed_0);\n  Controller.ButtonRUp.pressed(onevent_ControllerButtonRUp_pressed_0);\n  Controller.ButtonRDown.pressed(onevent_ControllerButtonRDown_pressed_0);\n\n  wait(15, msec);\n  vex::task ws1(whenStarted2);\n  vex::task ws2(whenStarted3);\n  whenStarted1();\n}","target":"Physical"}