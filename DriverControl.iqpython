{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nLiftMech = Motor(Ports.PORT4, False)\nFlyWheel = Motor(Ports.PORT11, False)\nleft_drive_smart = Motor(Ports.PORT1, 1.0, False)\nright_drive_smart = Motor(Ports.PORT6, 1.0, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 200, 173, 76, MM, 1)\nbumper_5 = Bumper(Ports.PORT5)\ncontroller = Controller()\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller = False\ndrivetrain_r_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA + axisC\n            # right = axisA - axisC\n            drivetrain_left_side_speed = controller.axisA.position() + controller.axisC.position()\n            drivetrain_right_side_speed = controller.axisA.position() - controller.axisC.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n\n#endregion VEXcode Generated Robot Configuration\nmyVariable = 0\nToggleUpDown = False\n\ndef onevent_controllerbuttonEDown_pressed_0():\n    global myVariable, ToggleUpDown\n    pass\n\ndef when_started1():\n    global myVariable, ToggleUpDown\n    ToggleUpDown = False\n    FlyWheel.set_velocity(100, PERCENT)\n    LiftMech.set_velocity(75, PERCENT)\n    drivetrain.set_drive_velocity(70, PERCENT)\n\ndef onevent_controllerbuttonRUp_pressed_0():\n    global myVariable, ToggleUpDown\n    pass\n\ndef when_started2():\n    global myVariable, ToggleUpDown\n    while True:\n        if controller.buttonRUp.pressing():\n            FlyWheel.spin(FORWARD)\n        elif controller.buttonRDown.pressing():\n            FlyWheel.spin(REVERSE)\n        else:\n            FlyWheel.stop()\n        wait(20, MSEC)\n\ndef when_started3():\n    global myVariable, ToggleUpDown\n    while True:\n        if controller.buttonEUp.pressing():\n            LiftMech.spin(FORWARD)\n        elif controller.buttonEDown.pressing():\n            LiftMech.spin(REVERSE)\n        else:\n            LiftMech.stop()\n        wait(20, MSEC)\n\ndef onevent_controllerbuttonRDown_pressed_0():\n    global myVariable, ToggleUpDown\n    pass\n\n# system event handlers\ncontroller.buttonEDown.pressed(onevent_controllerbuttonEDown_pressed_0)\ncontroller.buttonRUp.pressed(onevent_controllerbuttonRUp_pressed_0)\ncontroller.buttonRDown.pressed(onevent_controllerbuttonRDown_pressed_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nws2 = Thread( when_started2 )\nws3 = Thread( when_started3 )\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[4],"name":"LiftMech","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[11],"name":"FlyWheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1,6,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[5],"name":"bumper_5","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}